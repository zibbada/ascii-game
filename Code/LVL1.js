/*
Author: Tymofiy Spektor
Date: 8th jan 2024
Description: Maps registry
*/

/* 
    registered level

    size - used by for loops in map class to correctly draw level.
    depth - used for setting the distance between tile layers
    map - is 1D array that stores tile values for map class to properly draw them (it is one dimensional because Map.draw needs to now the sequential position of a tile)
    collision map 2d array use by the player to check for the collisions and actors.
    actors - array stores function  that are executed when player collides with them
*/
let lvl1 = {
    size: { width: 25, height: 25, depth: 4 },
    depth: .025,
    map: [68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 79, 96, 96, 96, 96, 96, 79, 55, 55, 55, 55, 55, 95, 95, 95, 95, 95, 95, 95, 95, 55, 55, 68,
        68, 55, 74, 55, 55, 55, 55, 55, 74, 55, 55, 55, 55, 55, 95, 95, 95, 95, 95, 95, 95, 95, 55, 55, 68,
        68, 55, 74, 55, 67, 55, 55, 55, 74, 55, 55, 55, 55, 55, 95, 95, 95, 95, 95, 95, 95, 95, 55, 55, 68,
        68, 55, 74, 55, 55, 55, 55, 55, 74, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 74, 55, 55, 55, 79, 96, 79, 55, 55, 55, 55, 55, 95, 95, 95, 95, 95, 95, 95, 95, 55, 55, 68,
        68, 55, 74, 55, 55, 55, 74, 55, 55, 55, 55, 55, 55, 55, 95, 95, 95, 95, 95, 95, 95, 95, 55, 55, 68,
        68, 55, 74, 55, 55, 55, 74, 55, 55, 55, 55, 55, 55, 55, 95, 95, 95, 95, 95, 95, 95, 95, 55, 55, 68,
        68, 55, 74, 55, 55, 55, 74, 55, 55, 55, 55, 75, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 79, 96, 55, 96, 79, 55, 55, 55, 72, 72, 72, 75, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 75, 75, 72, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 75, 75, 75, 75, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 75, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 94, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 91, 78, 92, 55, 55, 55, 55, 55, 68, 68, 68, 68, 68, 68, 68, 55, 68, 68, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 94, 55, 55, 68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 94, 55, 55, 55, 55, 55, 91, 78, 92, 55, 68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 91, 78, 92, 55, 94, 55, 55, 55, 93, 55, 55, 68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 93, 55, 91, 78, 92, 55, 55, 55, 55, 55, 68, 55, 55, 55, 55, 1, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 93, 55, 94, 55, 55, 55, 55, 68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 91, 78, 92, 55, 55, 55, 68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 55, 55, 55, 55, 55, 55, 55, 55, 93, 55, 55, 55, 55, 68, 55, 55, 55, 55, 55, 55, 55, 55, 55, 68,
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 79, 96, 0, 0, 0, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 67, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 79, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 79, 96, 0, 96, 79, 0, 0, 0, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 68, 68, 68, 68, 68, 68, 0, 68, 68, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 1, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 79, 96, 0, 0, 0, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 79, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 79, 96, 96, 96, 79, 0, 0, 0, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 75, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 79, 96, 96, 96, 96, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 79, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 74, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 79, 96, 96, 96, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68],
    collision: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1],
    [1, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 4, 4,4, 4, 4, 4, 4, 4, 0, 0, 1],
    [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
    
    //each time before loading a dialog i chage game state just in case.
    actors: [function (game) {
        game.state = 2;
        game.dialogHandler.Load("If only there was second page of the dialog",
            function () {
                game.state = 2;
                game.dialogHandler.Load("Oh, no way! I am happy now!", function () {
                    game.state = 2;
                    game.dialogHandler.Load("too bad there are no multiple lines dialog :(", function () {
                        game.state = 2;
                        game.dialogHandler.Load("Wait! I cant belive this!\n NO WAY!\n THIS IS THE BEST DAY OF MY LIFE", function () {
                            game.state = 1;
                        })
                    })
                })
            })
    }, function (game) {
        game.state = 2;
        game.dialogHandler.Load("*You fell down into the well*",
            function (game) {
                //wheb loading new map change game state to explore, load map and move player to a new position on a loaded map
                game.state = 1;
                game.currentMap = lvlWell;
                game.map.currentMap = lvlWell;
                game.player.x = 3;
                game.player.y = 3;
            })
    }, function (game) {
        game.state = 2;
        game.dialogHandler.Load("It is not nice to go over someone's farmland", function(){
            game.state=1
        })
    }]
}

let lvlWell = {
    size: { width: 7, height: 7, depth: 4 },
    depth: 0.025,
    map: [0, 0, 68, 68, 68, 0, 0,
        0, 68, 55, 55, 55, 68, 0,
        68, 55, 55, 55, 55, 55, 68,
        68, 67, 55, 55, 55, 67, 68,
        68, 55, 55, 55, 55, 55, 68,
        0, 68, 55, 67, 55, 68, 0,
        0, 0, 68, 68, 68, 0, 0,
        0, 0, 68, 68, 68, 0, 0,
        0, 68, 0, 0, 0, 68, 0,
        68, 0, 0, 0, 0, 0, 68,
        68, 67, 0, 0, 0, 67, 68,
        68, 0, 0, 0, 0, 0, 68,
        0, 68, 0, 67, 0, 68, 0,
        0, 0, 68, 68, 68, 0, 0, 0, 0, 68, 68, 68, 0, 0,
        0, 68, 0, 0, 0, 68, 0,
        68, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 68,
        68, 0, 0, 0, 0, 0, 68,
        0, 68, 0, 0, 0, 68, 0,
        0, 0, 68, 68, 68, 0, 0,],
    collision: [[1, 1, 1, 1, 1, 1, 1],
    [1, 1, 0, 0, 0, 1, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 2, 0, 0, 0, 2, 1],
    [1, 0, 0, 0, 0, 0, 1],
    [1, 1, 0, 2, 0, 1, 1],
    [1, 1, 1, 1, 1, 1, 1],],
    actors: [function (game) {
        game.state = 2;
        game.dialogHandler.Load("Well, I am in the well", function () {
            game.state = 2;
            game.dialogHandler.Load("(you cant go anywhere from here, so just reload the page)\njust joking going to teleport you back right now", function () { 
                game.state = 1
                game.currentMap = lvl1;
                game.map.currentMap = lvl1;
                game.player.x = 20;
                game.player.y = 20;

            })
        })
    }]

}